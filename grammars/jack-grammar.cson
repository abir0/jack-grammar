# If this is your first time writing a language grammar, check out:
#   - https://flight-manual.atom.io/hacking-atom/sections/creating-a-grammar/

'scopeName': 'source.jack'
'name': 'Jack'
'fileTypes': [
  'jack'
]
'patterns': [
  {
    'comment': 'one line comment'
    'match': '//.*$'
    'name': 'comment.line.jack'
  }
  {
    'comment': 'multi-line comment'
    'begin': '/\\*'
    'end': '\\*/'
    'name': 'comment.block.jack'
  }
  {
    'comment': 'documantation comment'
    'begin': '/\\*\\*'
    'end': '\\*/'
    'name': 'comment.block.documentation.jack'
  }
  {
    'comment': 'numeric constant'
    'match': '\\b[0-9]+\\b'
    'name': 'constant.numeric.jack'
  }
  {
    'comment': 'boolean and null constant'
    'match': '\\b(null|true|false)\\b'
    'name': 'constant.language.jack'
  }
  {
    'comment': 'pointer variable'
    'match': '\\b(this)\\b'
    'name': 'variable.language.jack'
  }
  {
    'comment': 'symbolic operator'
    'match': '(\\+|\\-|\\*|\\/|\\>|\\<|\\~|\\&|\\|)'
    'name': 'variable.operator.jack'
  }
  {
    'comment': 'language keyword'
    'match': '\\b(class|function|method|constructor|var|static|field|let|do|else|if|return|while)\\b'
    'name': 'keyword.jack'
  }
  {
    'comment': 'primitive variable type'
    'match': '\\b(void|boolean|int|char)\\b'
    'name': 'storage.type.jack'
  }
  {
    'comment': 'added variable types'
    'match': '\\bvar\\b[ ]*\\b([a-zA-Z]*)\\b'
    'captures':
      '1':
        'name': 'support.type.jack'
  }
  {
    'comment': 'added classe'
    'match': '\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b\\.'
    'captures':
      '1':
        'name': 'support.class.jack'
  }
  {
    'comment': 'string constant'
    'match': '\\".*?\\"'
    'name': 'string.quoted.jack'
  }
  {
    'comment': 'function identifier'
    'match': '\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b[ ]*\\('
    'captures':
      '1':
        'name': 'entity.name.function.jack'
  }

]
